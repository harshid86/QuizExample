{% extends "_base.twig" %}
{% if isHost %}
{% set back = '/index.php/host' %}
{% else %}
{% set back = '/index.php' %}
{% endif %}
{% block content %}
                <div ng-controller="myQuizCtrl" ng-switch="screen.mode">

                    <div ng-cloak ng-switch-when="hostplayer" class="text-center">

                        <h2>Welcome Host</h2>
                        
                    </div>

                    <div ng-cloak ng-switch-when="welcometeam" class="text-center">
                        <h2>Welcome back, <span ng-bind="team.Name" />!</h2>

                        <button class="btn btn-default btn-lg"  ng-click="screen.showChooseTeam()"><span class="glyphicon glyphicon-user"></span> Choose Different Team</button>
                        &nbsp;
                        <button class="btn btn-success btn-lg"  ng-click="startGame()">Start Game  <span class="glyphicon glyphicon-chevron-right"></span></button>
                    </div>

                    <div ng-cloak ng-switch-when="newteam">


                        <h4>Choose a Team</h4>
                        <form ng-submit="setTeam()" class="form-horizontal">
                            <div class="form-group">
                                  <label class="col-sm-2 control-label">Select your Team:</label>
                                  <div class="col-sm-10">
                                    <select class="form-control" ng-model="team">
                                        <option ng-repeat="t in teams.list" value="[[ t ]]" ng-bind="t.Name"></option>
                                    </select>
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="col-sm-offset-2 col-sm-10">
                                    <button class="btn btn-success" type="submit">Start Game</button>
                                </div>
                            </div>
                        </form>

                    </div>

                    <div ng-cloak ng-switch-when="newround">
                        <div class="round-cell">
                        	<h1 class="splash-title" ng-bind="rounds.current.data.Name"></h1>
                    	</div>

                        <button ng-show="screen.isHostController()" class="btn btn-default btn-lg" ng-click="hostControls.startRoundButton()" type="submit">Start Round</button>
                    </div>

                    <div ng-cloak ng-switch-when="newquestionsplash">

                        <div class="question-cell">
                        	<h1 class="splash-title animated-lsi lightSpeedIn" ng-bind="questions.current.data.QuestionText"></h1>
                    	</div>

                        <button ng-show="screen.isHostController()" class="btn btn-default btn-lg" ng-click="hostControls.startQuestionButton()" type="submit">Start Question</button>

                        <div ng-hide="screen.isHostController()" class="row">
                            <div class="col-xs-1 animate-repeat" ng-repeat="option in options.list">
                                <img class="option-image image-responsive" ng-src="/img/options/[[option.OptionImage]]" />
                            </div>
                        </div>
                    </div>

                    <div ng-cloak ng-switch-when="newquestion">
                        <div>
                            <counter time="[[countdown]]" />
                        </div>

                        <button ng-show="screen.isHostController() && questions.current.flags.timesUp" class="btn btn-default" ng-click="hostControls.nextQuestionButton()" type="submit">Next Question</button>

                        <div class="question-cell">
                        	<h1 class="question-text" ng-bind="questions.current.data.QuestionText"></h1>
                    	</div>

                        <div ng-hide="screen.isHostController()" class="row">
                            <div class="col-xs-1" ng-repeat="option in options.list">
                                <div class="option-item animate-repeat">
                                    <img class="option-image image-responsive " ng-src="/img/options/[[option.OptionImage]]" ng-click="makeChoice(option)" />
                                </div>
                            </div>
                        </div>
                    </div>

                    <div ng-cloak ng-switch-when="endgame" class="text-center">

                        <h2>Game Finished</h2>
                        
                    </div>

                </div>
{% endblock %}

{% block script_include %}
<script src="/js/vendor/jquery.piechartcountdown.min.js"></script>
{% endblock %}

{% block ajs_include %}
<script src="/js/directives/counter.js"></script>
<script src="/js/services/counter.js"></script>
<script src="/js/services/httpPost.js"></script>
<script src="/js/services/settings.js"></script>
<script src="/js/services/teams.js"></script>
<script src="/js/services/rounds.js"></script>
<script src="/js/services/questions.js"></script>
<script src="/js/services/options.js"></script>
<script src="/js/services/play.js"></script>
{% endblock %}

{% block script %}

app.controller("myQuizCtrl", function($scope, $timeout, $sessionStorage, $log, Counter, Settings, Play) {

    var pollingInterval = 500;

    var isHost = {{ isHost }};
    var showControls = {{ showControls }};

    $scope.countdown = 0;

    $scope.storage = $sessionStorage;

    $scope.logInfo = function(logText) {
        roundId = ($scope.rounds.current.data === undefined || $scope.rounds.current.data.id === undefined)
            ? '-'
            : $scope.rounds.current.data.id;

        questionId = ($scope.questions.current.data === undefined || $scope.questions.current.data.id === undefined)
            ? '-'
            : $scope.questions.current.data.id;

        return $log.info('[Round: ' + roundId + '][Question: ' + questionId + '] ' + logText);
    }

    $scope.screen = {
        mode: 'default',

        isPlayer: function () {
            return (!isHost);
        },

        isHost: function () {
            return (isHost);
        },

        isHostController: function () {
            return (isHost && showControls);
        },

        isHostDisplay: function () {
            return (isHost && !showControls);
        },

        showChooseTeam: function () {
            $scope.screen.mode = 'newteam';
        },

        showWelcomeHost: function () {
            $scope.screen.mode = 'hostplayer';

            $scope.countdown = Counter.start($scope.settings.RoundPauseTime, $scope.startGame);
        },

        showWelcomeTeam: function () {
            $scope.screen.mode = 'welcometeam';

        },

        showRoundSplash: function (round) {
            $scope.logInfo("Display round splash screen for Round " + round.Name);

            showScreen = function() {
                $scope.screen.mode = 'newround';
            }
            
            $scope.rounds.canStart($scope.loadQuestions, $scope.nextRound, showScreen, !$scope.screen.isHostController());

            if ($scope.screen.isHostController()) {
                showScreen();
            }
        },

        showQuestionSplash: function(question) {

            $scope.logInfo("Displaying question splash screen for Question: " + question.id);

            showScreen = function() {
                $scope.screen.mode = 'newquestionsplash';
            }

            $scope.options.load(question.id);

            $scope.questions.canStart($scope.screen.showQuestionOptions, $scope.nextQuestion, showScreen, !$scope.screen.isHostController());

            if ($scope.screen.isHostController()) {
                showScreen();
            }
        },

        showQuestionOptions: function() {
            $scope.logInfo("Display main question screen");

            $scope.screen.mode = 'newquestion';

            $scope.countdown = Counter.start($scope.settings.QuestionTimeLimit, function () {
            	$scope.questions.canComplete(function() {
		      		$scope.finishQuestion();
		      	}, function () {
		      		$scope.restartQuestion();
		      	});
            });
        },

        showEndGame: function() {
            $scope.screen.mode = 'endgame';
        }

    }

    $scope.hostControls = {
        startRoundButton: function() {
            $scope.logInfo("Host has started the Round");

            $scope.rounds.sendStartRound()
                .success(function(response) {
                    $scope.logInfo("Tell server we have started the round");

                    $scope.loadQuestions();
                });
        },

        nextRoundButton: function() {
            if ($scope.isHost) {
                $scope.sendCompleteRound();
            }
        },

        completeRoundButton: function() {
            $scope.logInfo("Host has completed this round");

            $scope.rounds.sendCompleteRound()
                .success($scope.nextRound);
        },

        lastRoundButton: function() {
            $scope.logInfo("Revert round");

            $scope.rounds.sendRevertRound()
                .success($scope.restartRound);
        },

        startQuestionButton: function() {
            $scope.logInfo("Host has started the question");

            $scope.questions.sendStartQuestion()
                .success($scope.screen.showQuestionOptions);
        },

        nextQuestionButton:  function() {
            if ($scope.isHost) {
                $scope.sendCompleteQuestion();
            }
        },

        completeQuestionButton: function() {
          $scope.logInfo("Host has completed this question");

          $scope.questions.sendCompleteQuestion()
            .success($scope.nextQuestion);
        },

        lastQuestionButton: function() {
            $scope.logInfo("Revert question");

            $scope.questions.sendRevertQuestion()
                .success($scope.restartQuestion);
        }
    }

    $scope.playerControls = {
        makeChoice: function(option) {

            if ($scope.screen.isHost() || $scope.questions.current.flags.timesUp) {
                return;
            }

            $scope.logInfo("Player has made a choice");

            $scope.options.hideAllBut(option);

            $scope.questions.current.flags.madeChoice = true;

            if ($scope.options.list.length == 1) {
                choicePauseTimeMs = $scope.settings.ChoicePauseTime * 1000;

                $timeout(function() {
                    $scope.opions.showAll();
                }, choicePauseTimeMs);
            }

            $scope.options.sendChoice($scope.team.id, option.id)
                .success(function(response) {
                    $scope.logInfo("Players choice logged");
                });;
        }
    }

    $scope.teams = new Play.Teams();

    $scope.rounds = new Play.Rounds();

    $scope.questions = new Play.Questions();

    $scope.options = new Play.Options();

    $scope.loadRounds = function() {
        $scope.rounds.load()
            .then(function() {

                if ($scope.rounds.list.length > 0) {
                    $scope.logInfo("Rounds data successfully loaded");

                    $scope.startRounds();
                }
            });
    }

    $scope.startRounds = function() {
        $scope.rounds.start()
            .then($scope.screen.showRoundSplash);
    }

    $scope.nextRound = function() {
        $scope.rounds.next()
            .then($scope.screen.showRoundSplash, $scope.screen.showEndGame);
    }

    $scope.restartRound = function() {
        $scope.rounds.restart()
            .then($scope.screen.showRoundSplash, $scope.loadRounds);
    }

    $scope.loadQuestions = function() {
        $scope.questions.load($scope.rounds.current.data.id)
            .then(function() {
                if ($scope.questions.list.length > 0) {
                    $scope.startQuestions();
                } else {
                    $scope.nextRound();
                }
            });
    }

    $scope.startQuestions = function() {
        $scope.questions.start()
            .then($scope.screen.showQuestionSplash, $scope.nextRound);
    }

    $scope.nextQuestion = function() {
        $scope.questions.next()
            .then($scope.screen.showQuestionSplash, $scope.nextRound);
    }

    $scope.restartQuestion = function() {
        $scope.questions.restart()
            .then($scope.screen.showQuestionSplash, $scope.restartRound);
    }

    $scope.finishQuestion = function() {
        
        $log.info("Finish the question");

        if ($scope.questions.current.flags.madeChoice === false && !$scope.screen.isHost()) {
            $scope.options.sendNoChoice($scope.team.id, $scope.questions.current.data.id)
                .success(function(response) {
                    $log.info("Empty choice logged");
                });
        }

        $scope.options.clear();
        $scope.questions.current.resetFlags();

        $scope.nextQuestion();
    }

    $scope.startGame = function() {
        $scope.logInfo("Starting game");

        $scope.loadRounds();
    }

    $scope.setTeam = function() {
        if (typeof $scope.team == 'string') {
            $scope.team = JSON.parse($scope.team);
        }

        $scope.storage.team = $scope.team;

        $scope.startGame();
    }

    $scope.welcome = function() {
        if ($scope.screen.isHost()) {
            // For the host, show welcome screen
            $scope.screen.showWelcomeHost();
            return;
        }
        else if ($scope.storage.team !== undefined) {
            // Get team from localStorage
            _team = (typeof $scope.storage.team == 'string')
                ? JSON.parse($scope.storage.team)
                : $scope.storage.team;

            $scope.teams.setCurrent(_team);

            // Check team still exists server side
            if ($scope.teams.current.data.id !== undefined) {
                $scope.teams.current.check()
                    .then(function(response) {
                        if (response.id !== undefined) {
                            $scope.screen.showWelcomeTeam();
                        } else {
                            $scope.screen.showChooseTeam();
                        }
                    });
                return;
            }
        }

        $scope.screen.showChooseTeam();
    }


    $scope.init = function() {

        if ($scope.screen.isHostDisplay()) {
            $("#nav-menu").hide();
        }

        Settings.load()
            .then(function() {
                $scope.settings = Settings.get();

                return $scope.teams.load();
            })
            .then(function() {
                $scope.welcome();
            });
    }

    $scope.init();
});
{% endblock %}
